extends default

mixin chart(hours,lineHeight)
  - var padding = 20
  - var width = 800
  - var chartWidth = (width-(padding*2))
  - var pxPerHour = chartWidth/hours
  - var millisPerMinute = 60*1000
  - var millisPerHour = 60*millisPerMinute
  - var now = Date.now()
  - var startTime = now - (hours*millisPerHour)
  - var viewBox = `0 0 ${width} 140`
  -
    var ticks = []
    let tickDate = new Date(startTime);
    tickDate.setHours(0, 0, 0, 0);
    do {
      if (tickDate.getTime() > startTime) {
        ticks.push(tickDate.getTime())
      }
      tickDate.setHours(tickDate.getHours()+1)
    } while (tickDate.getTime() < now)

  svg(viewBox=viewBox)
    - var translate = `translate(${padding},${padding})`
    g(transform=translate)
      each historyItem in history.filter(i => i.end >= startTime)
        - var elapsed = (historyItem.end-historyItem.start)/millisPerHour
        - var width = Math.min(2,elapsed*pxPerHour)
        - var offset = ((historyItem.start - startTime)/millisPerHour)*pxPerHour
        rect.bar(width=width, height=lineHeight, x=offset)
          | #{JSON.stringify(historyItem)}
      - var line = `M 0 ${lineHeight} L ${chartWidth} ${lineHeight}`
      path.chart-axis(d=line)
      each tick in ticks
        - var xOffset = ((tick - startTime)/millisPerHour)*pxPerHour
        - var tickDate = new Date(tick)
        - var hours = tickDate.getHours()
        - var isMidnight = hours===0;
        - var is6Hour = hours%6 === 0
        - var tickHeight = (isMidnight)?10:3
        - var tickLine = `M ${xOffset} ${lineHeight} L ${xOffset} ${lineHeight+tickHeight}`
        path.chart-axis.tick(d=tickLine)
        if isMidnight
          - var tickLabel = tickDate.toLocaleDateString("default", { weekday: 'short', month: 'numeric', day: 'numeric' })
          - var tickLabelY = lineHeight+tickHeight+(tickHeight+3)
          - var tickLabelX = xOffset
          text.axis-label(x=xOffset,y=tickLabelY,style="text-anchor: middle;") #{tickLabel}
        else if is6Hour
          - var tickLabel = (hours > 12)?(hours-12):hours
          - var tickLabelY = lineHeight+tickHeight+(tickHeight*4)
          - var tickLabelX = xOffset
          text.axis-label(x=xOffset,y=tickLabelY,style="text-anchor: middle;") #{tickLabel}

block content
  script.
    function remainingTime(start,end) {
      var duration = end - start;
      var days = Math.floor(duration / (1000 * 60 * 60 * 24));
      var hours = Math.floor((duration % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
      var minutes = Math.floor((duration % (1000 * 60 * 60)) / (1000 * 60));
      var seconds = Math.floor((duration % (1000 * 60)) / 1000);
      var text = "";
      if (days > 0) {
        text = `${days} days`;
      }
      if (hours > 0) {
        text = `${text} ${hours}h`;
      }
      if (minutes > 0) {
        text = `${text} ${minutes}m`;
      }
      if (minutes < 2 && seconds > 0) {
        text = `${text} ${seconds}s`;
      }
      return text.replace(/\s{2,}/," ").trim();
    }

    function setupCountDown(id,end) {
      var intervalEnd = Date.parse(end);
      var interval = setInterval(function () {
        var now = Date.now();
        if (now < intervalEnd) {
          document.getElementById(id).innerHTML = remainingTime(now,intervalEnd);
        } else {
          clearInterval(interval);
          document.getElementById(id).innerHTML = "";
          setTimeout(function() { window.location.reload(false); },1100);
        }
      });
    }
  h1 #{title}
  div.dashboard
    div.controls
      .control 
        span.label status: 
        if status.running === true
          img.icon.va(src="/images/sprinkler-variant.svg")
        else
          img.icon.va2(src="/images/water-off.svg")
        if status.enabled === false
          span.ml-1 schedule disabled
      .control
        if status.running
          span.label current: 
          span.time#currentTime
            script.
              setupCountDown("currentTime","#{status.current.end}")
          span
            | &nbsp;remaining, circuit #{status.current.circuit}
      .control
        if status.next && status.next.start
          span.label next:
          span starts in&nbsp;
          span.time#nextTime
            script.
              setupCountDown("nextTime","#{status.next.start}")
          span
            | , circuit #{status.next.circuit}
    .chart-container
      +chart(36,50)
    .chart-container
      +chart(72,25)

