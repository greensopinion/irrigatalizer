extends default

block content
  h1 #{title}
  script
    - var model = JSON.stringify(schedule)
    - var daysOfWeek = JSON.stringify(days);
    - var offsetsOfDay = JSON.stringify(times);
    | const model = !{model};
    | const circuitIndexes = [1,2,3,4,5,6,7,8];
    | const daysOfWeek = !{daysOfWeek};
    | const offsetsOfDay = !{offsetsOfDay};
  script.
    function getDialogElement() {
      return document.getElementById('scheduleEntryDialog');
    }

    function presentEntryEditor(entry,editing) {
      const dialog = getDialogElement();
      dialog.style.display = "block";
      const deleteButton = document.getElementById('deleteEntryButton');
      if (editing) {
        deleteButton.style.display = "inline-block";
      } else {
        deleteButton.style.display = "none";
      }
      const editEntryTitle = document.getElementById('editEntryTitle');
      if (editing) {
        editEntryTitle.innerHTML = `Edit Schedule: ${entry.day.name} ${entry.start.name}`;
      } else {
        editEntryTitle.innerHTML = `New Schedule: ${entry.day.name} ${entry.start.name}`;
      }
      const entryDuration = document.getElementById('entryDuration');
      entryDuration.value = entry.duration;
      for (let i of circuitIndexes) {
        const checkbox = document.getElementById(`entryCircuit${i}`);
        if (entry.circuits[i]) {
          checkbox.checked = true;
        } else {
          checkbox.checked = false;
        }
      }
    }
    let originalEntry;

    function createEntryFromForm() {
      var entry = JSON.parse(JSON.stringify(originalEntry));

      const entryDuration = document.getElementById('entryDuration');
      entry.duration = Number(entryDuration.value);

      entry.circuits = {};
      for (let i of circuitIndexes) {
        const checkbox = document.getElementById(`entryCircuit${i}`);
        if (checkbox.checked) {
          entry.circuits[i]=true;
        }
      }
      return entry;
    }

    function showError(message) {
      const mainErrorElement = document.getElementById("mainError");
      const errorElement = document.getElementById("dialogError");
      errorElement.innerHTML = "";
      mainErrorElement.innerHTML = "";
      if (message) {
        errorElement.appendChild(document.createTextNode(message));
        errorElement.style.display = "block";
        mainErrorElement.appendChild(document.createTextNode(message));
        mainErrorElement.style.display = "block";
      } else {
        errorElement.style.display = "none";
        mainErrorElement.style.display = "none";
      }
    }

    function hideDialog() {
        getDialogElement().style.display = "none";
        showError(null);
    }

    function saveSchedule(errorHandler) {
      axios.put('/api/schedule',model).then((response)=> {
        originalEntry = null;
        showError("");
        hideDialog();
        updateScheduleDisplay();
        updateControlsDisplay();
      }, (error) => {
        var message = (error.response && error.response.data && error.response.data.error)?error.response.data.error:error;
        showError(message);
        console.log(error);
        if (errorHandler) {
          errorHandler();
        }
      });
    }

    function toggleSchedule() {
      model.enabled = !isScheduleEnabled();
      saveSchedule(() => {
        model.enabled = !isScheduleEnabled();
        updateControlsDisplay();
      });
    }

    function saveEntry() {
      const newEntry = createEntryFromForm();
      if (calculateEntryTotalTime(newEntry)<=0) {
        showError("Schedule has no effect!");
        return;
      }

      model.schedule = model.schedule.filter(e => e !== originalEntry);
      model.schedule.push(newEntry);
      originalEntry = newEntry;
      
      saveSchedule();
    }

    function deleteEntry() {
      model.schedule = model.schedule.filter(e => e !== originalEntry);
      originalEntry = null;
      saveSchedule();
    }

    function createEntry(entry) {
      originalEntry = entry;
      presentEntryEditor(entry,false);
    }

    function updateEntry(entry) {
      originalEntry = entry;
      const workingCopy = JSON.parse(JSON.stringify(originalEntry));
      presentEntryEditor(workingCopy,true);
    }

    function calculateEntryTotalTime(e) {
      const circuitsEnabled = Object.values(e.circuits).filter(c => c).length;
      return totalTime = circuitsEnabled * e.duration;
    }

    function findEntry(day,time) {
      return model.schedule.find(e => {
        if (e.day.offset != day.offset) {
          return false;
        }
        const totalTime = calculateEntryTotalTime(e);
        return e.start.offset <= time.offset && time.offset < (e.start.offset+totalTime);
      });
    }


    function editEntry(day,time) {
      var existing = findEntry(day,time);
      if (existing) {
        updateEntry(existing);
      } else {
        const newEntry = {
          day,
          start: time,
          duration: 15,
          circuits: {}
        };
        createEntry(newEntry);
      }
    }

    function cancelEditEntry() {
      hideDialog();
    }

    function updateScheduleDisplay() {
      for (let day of daysOfWeek) {
        for (let dayOffset of offsetsOfDay) {
          const id = `day${day.offset}time${dayOffset.offset}`;
          const element = document.getElementById(id);
          const entry = findEntry(day,dayOffset);
          if (entry) {
            element.classList.add("scheduled");
          } else {
            element.classList.remove("scheduled");
          }
        }
      }
    }

    function isScheduleEnabled() {
      return model.enabled !== false
    }

    function updateControlsDisplay() {
      const toggle = document.getElementById("toggleSchedule");
      const scheduleStatus = document.getElementById("scheduleStatus");
      if (isScheduleEnabled()) {
        toggle.classList.remove("material-icons-outlined")
        toggle.classList.add("material-icons")
        toggle.innerHTML = "toggle_on"
        scheduleStatus.innerHTML = ""
      } else {
        toggle.classList.remove("material-icons")
        toggle.classList.add("material-icons-outlined")
        toggle.innerHTML = "toggle_off"
        scheduleStatus.innerHTML = "schedule disabled"
      }
    }
  div.alert.alert-danger#mainError(role="alert", style="display: none;")
  div#scheduleEntryDialog
    div.dialogContent.shadow-lg.bg-white.rounded
      div.header#editEntryTitle
        | Title
      div.content
        div.alert.alert-danger#dialogError(role="alert", style="display: none;")
        form
          div.form-group
            label(for=entryDuration) Circuit Duration
            input.form-control#entryDuration(type="number",min=5,max=30,step=5)
          div.form-group.form-check
            each index in [1, 2, 3, 4, 5, 6, 7, 8]
              div.checkbox-group
                input.form-check-input&attributes({type:"checkbox",id:`entryCircuit${index}`})
                label.form-check-label&attributes({for:`entryCircuit${index}`}) Circuit #{index}
      div.footer
        button.btn.btn-outline-secondary(type="button",onclick="cancelEditEntry()") Cancel
        button.btn.btn-outline-danger#deleteEntryButton(type="button",onclick="deleteEntry()") Delete
        button.btn.btn-outline-primary(type="button",onclick="saveEntry()") Save
  .contols
    .control
      span.label.mr-2 status:
      button.btn.btn-light.material-icons#toggleSchedule(onclick='toggleSchedule()') toggle_on
      span.ml-2#scheduleStatus
  div.schedule
    each day in days
        div.day
            h2 #{day.name}
            each time in times
                - var al = `editEntry(${JSON.stringify(day)},${JSON.stringify(time)})`
                div.time(onclick=al)&attributes({class:`minutesPastHour${time.offset%60}`,id: `day${day.offset}time${time.offset}`})
                  | #{time.name}
  script.
    updateScheduleDisplay();
    updateControlsDisplay();